// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module sequencer_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 7,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    output wire [31:0]                   C_table_A,
    output wire [31:0]                   C_table_C,
    output wire [31:0]                   C_table_G,
    output wire [31:0]                   C_table_T,
    output wire [31:0]                   I_table,
    output wire [31:0]                   SR_length,
    output wire [31:0]                   ref_length,
    output wire [31:0]                   SR,
    input  wire [31:0]                   done,
    input  wire                          done_ap_vld,
    input  wire [31:0]                   matched,
    input  wire                          matched_ap_vld,
    input  wire [31:0]                   final_top_ptr,
    input  wire                          final_top_ptr_ap_vld,
    input  wire [31:0]                   final_bot_ptr,
    input  wire                          final_bot_ptr_ap_vld
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of C_table_A
//        bit 31~0 - C_table_A[31:0] (Read/Write)
// 0x14 : reserved
// 0x18 : Data signal of C_table_C
//        bit 31~0 - C_table_C[31:0] (Read/Write)
// 0x1c : reserved
// 0x20 : Data signal of C_table_G
//        bit 31~0 - C_table_G[31:0] (Read/Write)
// 0x24 : reserved
// 0x28 : Data signal of C_table_T
//        bit 31~0 - C_table_T[31:0] (Read/Write)
// 0x2c : reserved
// 0x30 : Data signal of I_table
//        bit 31~0 - I_table[31:0] (Read/Write)
// 0x34 : reserved
// 0x38 : Data signal of SR_length
//        bit 31~0 - SR_length[31:0] (Read/Write)
// 0x3c : reserved
// 0x40 : Data signal of ref_length
//        bit 31~0 - ref_length[31:0] (Read/Write)
// 0x44 : reserved
// 0x48 : Data signal of SR
//        bit 31~0 - SR[31:0] (Read/Write)
// 0x4c : reserved
// 0x50 : Data signal of done
//        bit 31~0 - done[31:0] (Read)
// 0x54 : Control signal of done
//        bit 0  - done_ap_vld (Read/COR)
//        others - reserved
// 0x58 : Data signal of matched
//        bit 31~0 - matched[31:0] (Read)
// 0x5c : Control signal of matched
//        bit 0  - matched_ap_vld (Read/COR)
//        others - reserved
// 0x60 : Data signal of final_top_ptr
//        bit 31~0 - final_top_ptr[31:0] (Read)
// 0x64 : Control signal of final_top_ptr
//        bit 0  - final_top_ptr_ap_vld (Read/COR)
//        others - reserved
// 0x68 : Data signal of final_bot_ptr
//        bit 31~0 - final_bot_ptr[31:0] (Read)
// 0x6c : Control signal of final_bot_ptr
//        bit 0  - final_bot_ptr_ap_vld (Read/COR)
//        others - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL              = 7'h00,
    ADDR_GIE                  = 7'h04,
    ADDR_IER                  = 7'h08,
    ADDR_ISR                  = 7'h0c,
    ADDR_C_TABLE_A_DATA_0     = 7'h10,
    ADDR_C_TABLE_A_CTRL       = 7'h14,
    ADDR_C_TABLE_C_DATA_0     = 7'h18,
    ADDR_C_TABLE_C_CTRL       = 7'h1c,
    ADDR_C_TABLE_G_DATA_0     = 7'h20,
    ADDR_C_TABLE_G_CTRL       = 7'h24,
    ADDR_C_TABLE_T_DATA_0     = 7'h28,
    ADDR_C_TABLE_T_CTRL       = 7'h2c,
    ADDR_I_TABLE_DATA_0       = 7'h30,
    ADDR_I_TABLE_CTRL         = 7'h34,
    ADDR_SR_LENGTH_DATA_0     = 7'h38,
    ADDR_SR_LENGTH_CTRL       = 7'h3c,
    ADDR_REF_LENGTH_DATA_0    = 7'h40,
    ADDR_REF_LENGTH_CTRL      = 7'h44,
    ADDR_SR_DATA_0            = 7'h48,
    ADDR_SR_CTRL              = 7'h4c,
    ADDR_DONE_DATA_0          = 7'h50,
    ADDR_DONE_CTRL            = 7'h54,
    ADDR_MATCHED_DATA_0       = 7'h58,
    ADDR_MATCHED_CTRL         = 7'h5c,
    ADDR_FINAL_TOP_PTR_DATA_0 = 7'h60,
    ADDR_FINAL_TOP_PTR_CTRL   = 7'h64,
    ADDR_FINAL_BOT_PTR_DATA_0 = 7'h68,
    ADDR_FINAL_BOT_PTR_CTRL   = 7'h6c,
    WRIDLE                    = 2'd0,
    WRDATA                    = 2'd1,
    WRRESP                    = 2'd2,
    RDIDLE                    = 2'd0,
    RDDATA                    = 2'd1,
    ADDR_BITS         = 7;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done;
    reg                           int_ap_start;
    reg                           int_auto_restart;
    reg                           int_gie;
    reg  [1:0]                    int_ier;
    reg  [1:0]                    int_isr;
    reg  [31:0]                   int_C_table_A;
    reg  [31:0]                   int_C_table_C;
    reg  [31:0]                   int_C_table_G;
    reg  [31:0]                   int_C_table_T;
    reg  [31:0]                   int_I_table;
    reg  [31:0]                   int_SR_length;
    reg  [31:0]                   int_ref_length;
    reg  [31:0]                   int_SR;
    reg  [31:0]                   int_done;
    reg                           int_done_ap_vld;
    reg  [31:0]                   int_matched;
    reg                           int_matched_ap_vld;
    reg  [31:0]                   int_final_top_ptr;
    reg                           int_final_top_ptr_ap_vld;
    reg  [31:0]                   int_final_bot_ptr;
    reg                           int_final_bot_ptr_ap_vld;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRIDLE;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDIDLE;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_C_TABLE_A_DATA_0: begin
                    rdata <= int_C_table_A[31:0];
                end
                ADDR_C_TABLE_C_DATA_0: begin
                    rdata <= int_C_table_C[31:0];
                end
                ADDR_C_TABLE_G_DATA_0: begin
                    rdata <= int_C_table_G[31:0];
                end
                ADDR_C_TABLE_T_DATA_0: begin
                    rdata <= int_C_table_T[31:0];
                end
                ADDR_I_TABLE_DATA_0: begin
                    rdata <= int_I_table[31:0];
                end
                ADDR_SR_LENGTH_DATA_0: begin
                    rdata <= int_SR_length[31:0];
                end
                ADDR_REF_LENGTH_DATA_0: begin
                    rdata <= int_ref_length[31:0];
                end
                ADDR_SR_DATA_0: begin
                    rdata <= int_SR[31:0];
                end
                ADDR_DONE_DATA_0: begin
                    rdata <= int_done[31:0];
                end
                ADDR_DONE_CTRL: begin
                    rdata[0] <= int_done_ap_vld;
                end
                ADDR_MATCHED_DATA_0: begin
                    rdata <= int_matched[31:0];
                end
                ADDR_MATCHED_CTRL: begin
                    rdata[0] <= int_matched_ap_vld;
                end
                ADDR_FINAL_TOP_PTR_DATA_0: begin
                    rdata <= int_final_top_ptr[31:0];
                end
                ADDR_FINAL_TOP_PTR_CTRL: begin
                    rdata[0] <= int_final_top_ptr_ap_vld;
                end
                ADDR_FINAL_BOT_PTR_DATA_0: begin
                    rdata <= int_final_bot_ptr[31:0];
                end
                ADDR_FINAL_BOT_PTR_CTRL: begin
                    rdata[0] <= int_final_bot_ptr_ap_vld;
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign interrupt    = int_gie & (|int_isr);
assign ap_start     = int_ap_start;
assign int_ap_idle  = ap_idle;
assign int_ap_ready = ap_ready;
assign C_table_A    = int_C_table_A;
assign C_table_C    = int_C_table_C;
assign C_table_G    = int_C_table_G;
assign C_table_T    = int_C_table_T;
assign I_table      = int_I_table;
assign SR_length    = int_SR_length;
assign ref_length   = int_ref_length;
assign SR           = int_SR;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_C_table_A[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_C_table_A[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_C_TABLE_A_DATA_0)
            int_C_table_A[31:0] <= (WDATA[31:0] & wmask) | (int_C_table_A[31:0] & ~wmask);
    end
end

// int_C_table_C[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_C_table_C[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_C_TABLE_C_DATA_0)
            int_C_table_C[31:0] <= (WDATA[31:0] & wmask) | (int_C_table_C[31:0] & ~wmask);
    end
end

// int_C_table_G[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_C_table_G[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_C_TABLE_G_DATA_0)
            int_C_table_G[31:0] <= (WDATA[31:0] & wmask) | (int_C_table_G[31:0] & ~wmask);
    end
end

// int_C_table_T[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_C_table_T[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_C_TABLE_T_DATA_0)
            int_C_table_T[31:0] <= (WDATA[31:0] & wmask) | (int_C_table_T[31:0] & ~wmask);
    end
end

// int_I_table[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_I_table[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_I_TABLE_DATA_0)
            int_I_table[31:0] <= (WDATA[31:0] & wmask) | (int_I_table[31:0] & ~wmask);
    end
end

// int_SR_length[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_SR_length[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_SR_LENGTH_DATA_0)
            int_SR_length[31:0] <= (WDATA[31:0] & wmask) | (int_SR_length[31:0] & ~wmask);
    end
end

// int_ref_length[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_ref_length[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_REF_LENGTH_DATA_0)
            int_ref_length[31:0] <= (WDATA[31:0] & wmask) | (int_ref_length[31:0] & ~wmask);
    end
end

// int_SR[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_SR[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_SR_DATA_0)
            int_SR[31:0] <= (WDATA[31:0] & wmask) | (int_SR[31:0] & ~wmask);
    end
end

// int_done
always @(posedge ACLK) begin
    if (ARESET)
        int_done <= 0;
    else if (ACLK_EN) begin
        if (done_ap_vld)
            int_done <= done;
    end
end

// int_done_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_done_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (done_ap_vld)
            int_done_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DONE_CTRL)
            int_done_ap_vld <= 1'b0; // clear on read
    end
end

// int_matched
always @(posedge ACLK) begin
    if (ARESET)
        int_matched <= 0;
    else if (ACLK_EN) begin
        if (matched_ap_vld)
            int_matched <= matched;
    end
end

// int_matched_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_matched_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (matched_ap_vld)
            int_matched_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_MATCHED_CTRL)
            int_matched_ap_vld <= 1'b0; // clear on read
    end
end

// int_final_top_ptr
always @(posedge ACLK) begin
    if (ARESET)
        int_final_top_ptr <= 0;
    else if (ACLK_EN) begin
        if (final_top_ptr_ap_vld)
            int_final_top_ptr <= final_top_ptr;
    end
end

// int_final_top_ptr_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_final_top_ptr_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (final_top_ptr_ap_vld)
            int_final_top_ptr_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_FINAL_TOP_PTR_CTRL)
            int_final_top_ptr_ap_vld <= 1'b0; // clear on read
    end
end

// int_final_bot_ptr
always @(posedge ACLK) begin
    if (ARESET)
        int_final_bot_ptr <= 0;
    else if (ACLK_EN) begin
        if (final_bot_ptr_ap_vld)
            int_final_bot_ptr <= final_bot_ptr;
    end
end

// int_final_bot_ptr_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_final_bot_ptr_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (final_bot_ptr_ap_vld)
            int_final_bot_ptr_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_FINAL_BOT_PTR_CTRL)
            int_final_bot_ptr_ap_vld <= 1'b0; // clear on read
    end
end


//------------------------Memory logic-------------------

endmodule
