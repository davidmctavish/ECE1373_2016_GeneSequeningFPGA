-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity sequencer_AXILiteS_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 7;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    C_table_A             :out  STD_LOGIC_VECTOR(31 downto 0);
    C_table_C             :out  STD_LOGIC_VECTOR(31 downto 0);
    C_table_G             :out  STD_LOGIC_VECTOR(31 downto 0);
    C_table_T             :out  STD_LOGIC_VECTOR(31 downto 0);
    I_table               :out  STD_LOGIC_VECTOR(31 downto 0);
    SR_length             :out  STD_LOGIC_VECTOR(31 downto 0);
    ref_length            :out  STD_LOGIC_VECTOR(31 downto 0);
    SR                    :out  STD_LOGIC_VECTOR(31 downto 0);
    done                  :in   STD_LOGIC_VECTOR(31 downto 0);
    done_ap_vld           :in   STD_LOGIC;
    matched               :in   STD_LOGIC_VECTOR(31 downto 0);
    matched_ap_vld        :in   STD_LOGIC;
    final_top_ptr         :in   STD_LOGIC_VECTOR(31 downto 0);
    final_top_ptr_ap_vld  :in   STD_LOGIC;
    final_bot_ptr         :in   STD_LOGIC_VECTOR(31 downto 0);
    final_bot_ptr_ap_vld  :in   STD_LOGIC
);
end entity sequencer_AXILiteS_s_axi;

-- ------------------------Address Info-------------------
-- 0x00 : Control signals
--        bit 0  - ap_start (Read/Write/COH)
--        bit 1  - ap_done (Read/COR)
--        bit 2  - ap_idle (Read)
--        bit 3  - ap_ready (Read)
--        bit 7  - auto_restart (Read/Write)
--        others - reserved
-- 0x04 : Global Interrupt Enable Register
--        bit 0  - Global Interrupt Enable (Read/Write)
--        others - reserved
-- 0x08 : IP Interrupt Enable Register (Read/Write)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x0c : IP Interrupt Status Register (Read/TOW)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x10 : Data signal of C_table_A
--        bit 31~0 - C_table_A[31:0] (Read/Write)
-- 0x14 : reserved
-- 0x18 : Data signal of C_table_C
--        bit 31~0 - C_table_C[31:0] (Read/Write)
-- 0x1c : reserved
-- 0x20 : Data signal of C_table_G
--        bit 31~0 - C_table_G[31:0] (Read/Write)
-- 0x24 : reserved
-- 0x28 : Data signal of C_table_T
--        bit 31~0 - C_table_T[31:0] (Read/Write)
-- 0x2c : reserved
-- 0x30 : Data signal of I_table
--        bit 31~0 - I_table[31:0] (Read/Write)
-- 0x34 : reserved
-- 0x38 : Data signal of SR_length
--        bit 31~0 - SR_length[31:0] (Read/Write)
-- 0x3c : reserved
-- 0x40 : Data signal of ref_length
--        bit 31~0 - ref_length[31:0] (Read/Write)
-- 0x44 : reserved
-- 0x48 : Data signal of SR
--        bit 31~0 - SR[31:0] (Read/Write)
-- 0x4c : reserved
-- 0x50 : Data signal of done
--        bit 31~0 - done[31:0] (Read)
-- 0x54 : Control signal of done
--        bit 0  - done_ap_vld (Read/COR)
--        others - reserved
-- 0x58 : Data signal of matched
--        bit 31~0 - matched[31:0] (Read)
-- 0x5c : Control signal of matched
--        bit 0  - matched_ap_vld (Read/COR)
--        others - reserved
-- 0x60 : Data signal of final_top_ptr
--        bit 31~0 - final_top_ptr[31:0] (Read)
-- 0x64 : Control signal of final_top_ptr
--        bit 0  - final_top_ptr_ap_vld (Read/COR)
--        others - reserved
-- 0x68 : Data signal of final_bot_ptr
--        bit 31~0 - final_bot_ptr[31:0] (Read)
-- 0x6c : Control signal of final_bot_ptr
--        bit 0  - final_bot_ptr_ap_vld (Read/COR)
--        others - reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of sequencer_AXILiteS_s_axi is
    type states is (wridle, wrdata, wrresp, rdidle, rddata);  -- read and write fsm states
    signal wstate, wnext, rstate, rnext: states;
    constant ADDR_AP_CTRL              : INTEGER := 16#00#;
    constant ADDR_GIE                  : INTEGER := 16#04#;
    constant ADDR_IER                  : INTEGER := 16#08#;
    constant ADDR_ISR                  : INTEGER := 16#0c#;
    constant ADDR_C_TABLE_A_DATA_0     : INTEGER := 16#10#;
    constant ADDR_C_TABLE_A_CTRL       : INTEGER := 16#14#;
    constant ADDR_C_TABLE_C_DATA_0     : INTEGER := 16#18#;
    constant ADDR_C_TABLE_C_CTRL       : INTEGER := 16#1c#;
    constant ADDR_C_TABLE_G_DATA_0     : INTEGER := 16#20#;
    constant ADDR_C_TABLE_G_CTRL       : INTEGER := 16#24#;
    constant ADDR_C_TABLE_T_DATA_0     : INTEGER := 16#28#;
    constant ADDR_C_TABLE_T_CTRL       : INTEGER := 16#2c#;
    constant ADDR_I_TABLE_DATA_0       : INTEGER := 16#30#;
    constant ADDR_I_TABLE_CTRL         : INTEGER := 16#34#;
    constant ADDR_SR_LENGTH_DATA_0     : INTEGER := 16#38#;
    constant ADDR_SR_LENGTH_CTRL       : INTEGER := 16#3c#;
    constant ADDR_REF_LENGTH_DATA_0    : INTEGER := 16#40#;
    constant ADDR_REF_LENGTH_CTRL      : INTEGER := 16#44#;
    constant ADDR_SR_DATA_0            : INTEGER := 16#48#;
    constant ADDR_SR_CTRL              : INTEGER := 16#4c#;
    constant ADDR_DONE_DATA_0          : INTEGER := 16#50#;
    constant ADDR_DONE_CTRL            : INTEGER := 16#54#;
    constant ADDR_MATCHED_DATA_0       : INTEGER := 16#58#;
    constant ADDR_MATCHED_CTRL         : INTEGER := 16#5c#;
    constant ADDR_FINAL_TOP_PTR_DATA_0 : INTEGER := 16#60#;
    constant ADDR_FINAL_TOP_PTR_CTRL   : INTEGER := 16#64#;
    constant ADDR_FINAL_BOT_PTR_DATA_0 : INTEGER := 16#68#;
    constant ADDR_FINAL_BOT_PTR_CTRL   : INTEGER := 16#6c#;
    constant ADDR_BITS         : INTEGER := 7;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC;
    signal int_ap_start        : STD_LOGIC;
    signal int_auto_restart    : STD_LOGIC;
    signal int_gie             : STD_LOGIC;
    signal int_ier             : UNSIGNED(1 downto 0);
    signal int_isr             : UNSIGNED(1 downto 0);
    signal int_C_table_A       : UNSIGNED(31 downto 0);
    signal int_C_table_C       : UNSIGNED(31 downto 0);
    signal int_C_table_G       : UNSIGNED(31 downto 0);
    signal int_C_table_T       : UNSIGNED(31 downto 0);
    signal int_I_table         : UNSIGNED(31 downto 0);
    signal int_SR_length       : UNSIGNED(31 downto 0);
    signal int_ref_length      : UNSIGNED(31 downto 0);
    signal int_SR              : UNSIGNED(31 downto 0);
    signal int_done            : UNSIGNED(31 downto 0);
    signal int_done_ap_vld     : STD_LOGIC;
    signal int_matched         : UNSIGNED(31 downto 0);
    signal int_matched_ap_vld  : STD_LOGIC;
    signal int_final_top_ptr   : UNSIGNED(31 downto 0);
    signal int_final_top_ptr_ap_vld : STD_LOGIC;
    signal int_final_bot_ptr   : UNSIGNED(31 downto 0);
    signal int_final_bot_ptr_ap_vld : STD_LOGIC;


begin
-- ----------------------- Instantiation------------------

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wridle;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (aw_hs = '1') then
                waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdidle;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (ar_hs = '1') then
                case (TO_INTEGER(raddr)) is
                when ADDR_AP_CTRL =>
                    rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                when ADDR_GIE =>
                    rdata_data <= (0 => int_gie, others => '0');
                when ADDR_IER =>
                    rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                when ADDR_ISR =>
                    rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                when ADDR_C_TABLE_A_DATA_0 =>
                    rdata_data <= RESIZE(int_C_table_A(31 downto 0), 32);
                when ADDR_C_TABLE_C_DATA_0 =>
                    rdata_data <= RESIZE(int_C_table_C(31 downto 0), 32);
                when ADDR_C_TABLE_G_DATA_0 =>
                    rdata_data <= RESIZE(int_C_table_G(31 downto 0), 32);
                when ADDR_C_TABLE_T_DATA_0 =>
                    rdata_data <= RESIZE(int_C_table_T(31 downto 0), 32);
                when ADDR_I_TABLE_DATA_0 =>
                    rdata_data <= RESIZE(int_I_table(31 downto 0), 32);
                when ADDR_SR_LENGTH_DATA_0 =>
                    rdata_data <= RESIZE(int_SR_length(31 downto 0), 32);
                when ADDR_REF_LENGTH_DATA_0 =>
                    rdata_data <= RESIZE(int_ref_length(31 downto 0), 32);
                when ADDR_SR_DATA_0 =>
                    rdata_data <= RESIZE(int_SR(31 downto 0), 32);
                when ADDR_DONE_DATA_0 =>
                    rdata_data <= RESIZE(int_done(31 downto 0), 32);
                when ADDR_DONE_CTRL =>
                    rdata_data <= (0 => int_done_ap_vld, others => '0');
                when ADDR_MATCHED_DATA_0 =>
                    rdata_data <= RESIZE(int_matched(31 downto 0), 32);
                when ADDR_MATCHED_CTRL =>
                    rdata_data <= (0 => int_matched_ap_vld, others => '0');
                when ADDR_FINAL_TOP_PTR_DATA_0 =>
                    rdata_data <= RESIZE(int_final_top_ptr(31 downto 0), 32);
                when ADDR_FINAL_TOP_PTR_CTRL =>
                    rdata_data <= (0 => int_final_top_ptr_ap_vld, others => '0');
                when ADDR_FINAL_BOT_PTR_DATA_0 =>
                    rdata_data <= RESIZE(int_final_bot_ptr(31 downto 0), 32);
                when ADDR_FINAL_BOT_PTR_CTRL =>
                    rdata_data <= (0 => int_final_bot_ptr_ap_vld, others => '0');
                when others =>
                    rdata_data <= (others => '0');
                end case;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    int_ap_idle          <= ap_idle;
    int_ap_ready         <= ap_ready;
    C_table_A            <= STD_LOGIC_VECTOR(int_C_table_A);
    C_table_C            <= STD_LOGIC_VECTOR(int_C_table_C);
    C_table_G            <= STD_LOGIC_VECTOR(int_C_table_G);
    C_table_T            <= STD_LOGIC_VECTOR(int_C_table_T);
    I_table              <= STD_LOGIC_VECTOR(int_I_table);
    SR_length            <= STD_LOGIC_VECTOR(int_SR_length);
    ref_length           <= STD_LOGIC_VECTOR(int_ref_length);
    SR                   <= STD_LOGIC_VECTOR(int_SR);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (int_ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_TABLE_A_DATA_0) then
                    int_C_table_A(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_table_A(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_TABLE_C_DATA_0) then
                    int_C_table_C(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_table_C(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_TABLE_G_DATA_0) then
                    int_C_table_G(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_table_G(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_TABLE_T_DATA_0) then
                    int_C_table_T(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_table_T(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_I_TABLE_DATA_0) then
                    int_I_table(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_I_table(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_SR_LENGTH_DATA_0) then
                    int_SR_length(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_SR_length(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_REF_LENGTH_DATA_0) then
                    int_ref_length(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_ref_length(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_SR_DATA_0) then
                    int_SR(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_SR(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_done <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (done_ap_vld = '1') then
                    int_done <= UNSIGNED(done); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_done_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (done_ap_vld = '1') then
                    int_done_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_DONE_CTRL) then
                    int_done_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_matched <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (matched_ap_vld = '1') then
                    int_matched <= UNSIGNED(matched); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_matched_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (matched_ap_vld = '1') then
                    int_matched_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_MATCHED_CTRL) then
                    int_matched_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_final_top_ptr <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (final_top_ptr_ap_vld = '1') then
                    int_final_top_ptr <= UNSIGNED(final_top_ptr); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_final_top_ptr_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (final_top_ptr_ap_vld = '1') then
                    int_final_top_ptr_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_FINAL_TOP_PTR_CTRL) then
                    int_final_top_ptr_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_final_bot_ptr <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (final_bot_ptr_ap_vld = '1') then
                    int_final_bot_ptr <= UNSIGNED(final_bot_ptr); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_final_bot_ptr_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (final_bot_ptr_ap_vld = '1') then
                    int_final_bot_ptr_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_FINAL_BOT_PTR_CTRL) then
                    int_final_bot_ptr_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------

end architecture behave;
